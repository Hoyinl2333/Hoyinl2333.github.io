<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test2</title>
      <link href="/2024/06/29/test2/"/>
      <url>/2024/06/29/test2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/index_img.png" alt="" /></p><h3 id="中文测试"><a href="#中文测试" class="headerlink" title="中文测试"></a>中文测试</h3><ol><li>Hexo 简介<br>Hexo 是一个基于Node.js的静态博客框架，以其快速、简洁、高效的特点广受博主欢迎。它支持Markdown语法，使得博客文章的编写更为便捷。Hexo的静态网页生成速度快，能够满足大量页面的快速生成需求。此外，Hexo拥有丰富的主题和插件系统，用户可以根据自己的需求进行个性化定制。</li></ol><p>1.1 Hexo的特点<br>快速生成：利用Node.js的性能优势，Hexo能够在短时间内生成大量静态网页，即使是拥有数百页面的博客也能迅速完成渲染。<br>Markdown支持：Hexo原生支持Markdown，并且兼容GitHub Flavored Markdown，允许用户使用Markdown语法轻松编写博客文章。<br>主题丰富：Hexo提供了多种主题供用户选择，用户也可以根据个人喜好自定义主题，展现个性化的博客风格。<br>一键部署：Hexo支持一键部署到GitHub Pages、Heroku等平台，简化了博客的发布流程。<br>1.2 Hexo的安装步骤<br>安装Node.js：作为Hexo的运行基础，用户首先需要从Node.js官网下载并安装适合自己操作系统的版本。<br>安装Hexo：通过npm全局安装Hexo，命令为 npm install -g hexo-cli。<br>初始化博客：在目标目录下运行 hexo init 命令，初始化一个新的Hexo博客项目。<br>1.3 Hexo的使用方法<br>编写文章：在 source/_posts 目录下使用Markdown格式编写文章，Hexo将自动识别并解析。<br>生成网页：通过运行 hexo generate 或简写 hexo g 命令，Hexo将解析所有文章并生成静态网页，存放于 public 目录。<br>部署博客：使用 hexo deploy 或 hexo d 命令，将生成的网页文件推送至GitHub Pages等平台。<br>Hexo以其强大的功能和易用性，成为众多博主搭建个人博客的首选工具。通过上述介绍，读者应该对Hexo有了基本的了解，可以开始尝试使用Hexo搭建自己的博客。</p><ol><li>安装 Hexo<br>2.1 安装前的准备工作<br>在开始安装 Hexo 之前，需要确保您的计算机上已经安装了 Node.js 和 Git。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，而 Git 是一个分布式版本控制系统。这两个工具是 Hexo 运行和版本控制的基础设施。</li></ol><p>Node.js：Hexo 作为一个基于 Node.js 的静态博客框架，需要 Node.js 环境来执行。建议使用 Node.js 版本 10.13 或更高版本，以确保所有 Hexo 功能的兼容性和稳定性。<br>Git：用于版本控制，方便您管理和跟踪博客内容的变更历史。<br>2.2 安装 Node.js 和 Git<br>以下是在不同操作系统上安装 Node.js 和 Git 的基本步骤：</p><p>Windows：</p><p>访问 Node.js 官网 下载安装包并安装，确保勾选 “Add to PATH” 选项。<br>访问 Git 官网 下载安装包，安装过程中选择将 Git 添加到系统 PATH。<br>Mac：</p><p>使用 Homebrew 安装 Node.js：brew install node<br>使用 Homebrew 安装 Git：brew install git<br>或者通过官网下载安装包进行安装。<br>Linux：</p><p>使用包管理器安装 Node.js 和 Git，例如在 Ubuntu 上可以使用以下命令：<br>sudo apt-get install nodejs<br>sudo apt-get install git<br>2.3 使用 npm 安装 Hexo<br>安装 Node.js 和 Git 之后，可以通过 npm（Node.js 的包管理器）来安装 Hexo。在命令行中运行以下命令：</p><p>npm install -g hexo-cli<br>这条命令会全局安装 Hexo 的命令行工具 hexo-cli，允许您在任何目录下通过 hexo 命令来创建和管理 Hexo 博客。</p><p>2.4 验证安装<br>安装完成后，可以通过运行以下命令来验证 Hexo 是否正确安装：</p><p>hexo —version<br>如果安装成功，该命令将输出当前安装的 Hexo 版本号。如果遇到任何问题，可以参考 Hexo 的官方文档或在社区中寻求帮助。</p><ol><li>Hexo 功能特点<br>3.1 快速生成静态网页<br>Hexo 利用 Node.js 的强大性能，能够在极短的时间内生成大量静态网页。这意味着即使博客拥有成百上千篇文章，Hexo 也能快速完成渲染和生成，确保用户能够迅速地访问和浏览内容。</li></ol><p>3.2 支持Markdown和其他标记语言<br>Hexo 原生支持 Markdown 语法，允许用户以简洁的文本格式编写博客文章，而无需担心排版问题。此外，Hexo 还支持其他标记语言，如 AsciiDoc 和 reStructuredText，为用户提供了更多的选择和灵活性。</p><p>3.3 丰富的主题和插件系统<br>Hexo 提供了多种美观的主题供用户选择，同时也支持用户自定义主题，以满足个性化的需求。此外，Hexo 拥有一个强大的插件系统，允许用户通过安装各种插件来扩展博客的功能，如添加评论系统、搜索功能、SEO 优化等。</p><p>3.4 一键部署到多种平台<br>Hexo 支持一键部署到 GitHub Pages、Heroku 等多种平台，简化了博客的发布流程。用户只需执行简单的命令，即可将生成的静态网页推送到指定的托管服务上，实现博客的快速上线。</p><p>3.5 社区和文档支持<br>Hexo 拥有一个活跃的社区和详细的文档，为用户提供了丰富的资源和支持。无论是在安装、配置还是使用过程中遇到问题，用户都可以在社区中寻求帮助或在文档中找到解决方案。</p><p>3.6 版本兼容性和更新<br>Hexo 团队持续更新和维护项目，确保与最新版本的 Node.js 兼容。用户可以根据项目的需求选择合适的 Hexo 版本，同时享受到持续的改进和新功能的加入。</p><ol><li>Hexo 主题与插件<br>4.1 主题概述与特点<br>Hexo 是一个功能强大的静态博客生成器，它支持多种主题，这些主题不仅美观，而且高度可定制。用户可以根据自己的需求和喜好选择不同的主题。</li></ol><p>主题多样性：Hexo 社区提供了大量的主题，从简约风格到复杂布局，用户可以自由选择。<br>响应式设计：多数Hexo主题采用响应式设计，确保在不同设备上都能提供良好的阅读体验。<br>定制化：用户可以根据自己的需求修改主题的样式和布局，甚至可以从头开始创建一个全新的主题。<br>4.2 主题结构与配置<br>Hexo 主题通常包含多个组成部分，包括但不限于配置文件、语言文件、布局文件、脚本和资源文件夹。</p><p>配置文件 (_config.yml)：存储主题的配置选项，如颜色方案、布局设置等。<br>语言文件 (languages)：支持多语言，可以根据用户的语言偏好显示不同的文本。<br>布局文件 (layout)：包含主题的模板文件，决定了网站内容的呈现方式。<br>脚本 (scripts)：在启动时加载的 JavaScript 文件，用于增强主题功能。<br>资源 (source)：存放非模板的资源文件，如 CSS、JavaScript 和图片等。<br>4.3 插件的作用与集成<br>Hexo 插件可以扩展博客的功能，如增加评论系统、搜索功能、SEO优化等。</p><p>插件安装：通过 npm 安装插件，然后在 Hexo 配置文件中启用。<br>插件类型：包括但不限于性能优化、安全增强、界面美化等。<br>插件与主题的协同：一些插件可能需要特定的主题支持，或者对主题的样式有所影响，用户需要根据实际情况进行选择和配置。<br>4.4 主题与插件的选择建议<br>选择合适的主题和插件对于构建一个功能完善、用户体验良好的博客至关重要。</p><p>功能性：根据博客的定位和目标受众，选择具备相应功能的插件。<br>兼容性：确保所选主题和插件之间的兼容性，避免出现冲突。<br>社区支持：选择活跃的社区支持的主题和插件，以便在遇到问题时能够获得帮助。<br>更新频率：选择经常更新的主题和插件，以确保安全性和功能的现代性。<br>4.5 发布与分享主题<br>创建并定制自己的 Hexo 主题后，可以选择将其发布，供社区中的其他用户使用。</p><p>发布流程：包括 Fork 官方主题仓库、修改配置文件、提交 Pull Request 等步骤。<br>主题展示：提供主题的预览图和在线演示，帮助用户了解主题的外观和功能。<br>文档编写：为自定义主题编写清晰的文档，说明如何安装、配置和使用。</p><ol><li>Hexo 部署<br>Hexo 部署是将本地生成的静态网站文件发布到服务器上的过程，以便用户能够通过互联网访问网站。以下是 Hexo 部署的详细步骤和方法：</li></ol><p>5.1 部署前的准备工作<br>在开始部署之前，需要确保本地已经安装了 Hexo 并且站点已经生成。可以通过以下命令生成站点文件：</p><p>$ hexo generate<br>生成的文件将位于 public 目录下。</p><p>5.2 配置部署参数<br>在 Hexo 的配置文件 _config.yml 中设置部署相关的参数。至少需要指定部署的类型（type）和仓库（repo）。例如，使用 Git 作为部署方式：</p><p>deploy:<br>  type: git<br>  repo: <repository URL><br>如果使用多个部署方式，可以按照顺序列出每个 deployer。</p><p>5.3 使用 Git 部署<br>Git 是一种常见的部署方式，以下是使用 Git 部署的步骤：</p><p>安装 hexo-deployer-git 插件：</p><p>$ npm install hexo-deployer-git —save<br>修改配置文件，设置仓库地址、分支等信息：</p><p>deploy:<br>  type: git<br>  repo: <repository URL><br>  branch: [branch name]<br>生成站点文件并部署到远程仓库：</p><p>$ hexo clean &amp;&amp; hexo deploy<br>如果使用 HTTPS 克隆的仓库，可能需要输入用户名和密码。</p><p>5.4 使用 Heroku 部署<br>Heroku 是一个支持多种编程语言的云平台，可以方便地部署 Hexo 站点：</p><p>安装 hexo-deployer-heroku 插件：</p><p>$ npm install hexo-deployer-heroku —save<br>修改配置文件，设置 Heroku 仓库地址：</p><p>deploy:<br>  type: heroku<br>  repo: <Heroku repository URL><br>部署站点：</p><p>$ hexo deploy<br>5.5 使用 Netlify 部署<br>Netlify 是一个提供持续集成和 CDN 服务的平台，适合部署静态网站：</p><p>通过 Netlify 的网页端用户界面将 Hexo 站点关联到 Netlify，并选择对应的 Git 仓库。</p><p>或者使用 Netlify CLI 工具进行部署。</p><p>5.6 使用其他部署方式<br>除了上述方法，Hexo 还支持 Rsync、FTPSync、SFTP 等多种部署方式，具体配置方法可以参考 Hexo 官方文档。</p><p>5.7 注意事项<br>确保 _config.yml 文件中的部署配置正确无误。<br>如果使用自定义域名，请将 CNAME 文件放置在 source 目录下。<br>部署过程中可能需要处理权限问题，确保本地用户有权访问和修改远程仓库。<br>部署完成后，稍等片刻，站点应该能够通过设置的域名访问。</p><ol><li><p>Hexo 简介<br>Hexo 是一款基于 Node.js 的快速、简洁且高效的静态博客框架，它能够将 Markdown 文章渲染成静态的 HTML 网页文件，方便用户快速搭建个人博客。</p></li><li><p>准备工作<br>在搭建 Hexo 环境之前，需要确保计算机上安装了 Node.js、Git、npm 和 yarn 等工具。</p></li></ol><p>2.1 Windows 系统安装<br>对于 Windows 系统，可以使用 Scoop 来简化安装过程，或者按照官方指南手动安装。</p><p>2.2 Linux 系统安装<br>Linux 用户可以通过包管理器安装所需的工具，例如在 Debian/Ubuntu 上使用 apt，ArchLinux/Manjaro 使用 pacman，openSUSE 使用 zypper。</p><p>2.3 macOS 系统安装<br>macOS 用户需要先安装 Homebrew，然后通过它来安装 Git、Node.js 和 yarn 等工具。</p><ol><li>安装 Hexo<br>安装 Hexo 可以通过 npm 或 yarn 进行全局安装。</li></ol><p>3.1 全局安装 Hexo<br>在命令行中使用 npm 或 yarn 命令进行安装。</p><ol><li><p>初始化博客<br>在目标目录下使用 Hexo 初始化命令创建博客结构，并安装所需的依赖。</p></li><li><p>本地预览与部署<br>使用 Hexo 提供的命令在本地预览博客，并可以通过 Hexo 部署到 GitHub Pages 等平台。</p></li></ol><p>5.1 本地预览<br>通过 hexo s 命令启动本地服务器，预览博客效果。</p><p>5.2 部署到 GitHub<br>配置 Hexo 的 _config.yml 文件，并使用 hexo d 命令将静态网页推送到 GitHub 仓库。</p><ol><li>总结<br>Hexo 以其静态网页生成的高效性、Markdown 支持、丰富的主题选择和一键部署等特点，成为了搭建个人博客的优选工具。通过本文的介绍，读者可以快速了解并掌握 Hexo 的安装、配置和使用，进而搭建出个性化的博客网站。</li></ol><h3 id="English-Test"><a href="#English-Test" class="headerlink" title="English Test"></a>English Test</h3><p>abcdefg</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2024/06/24/test1/"/>
      <url>/2024/06/24/test1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/index_img.png" alt="" /></p><h3 id="文字测试"><a href="#文字测试" class="headerlink" title="文字测试"></a>文字测试</h3><p>你好世界。hello world.</p><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    std::string a = b = c = d = <span class="string">&quot;123456789012345asdfasdf0&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>`</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
